package union.find;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import union.find.core.UnionFind;
import util.Pair;

import java.util.Arrays;
import java.util.Comparator;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Given an array of nn stones in a two-dimensional plane, where each stone is represented by a pair of x and y coordinates, find the maximum number of stones we can remove with the following condition:
 *
 * A stone can be removed if it shares either the same row or the same column with another stone that has not been removed so far.
 *
 * Stones are provided as an array, stones, of length nn, where stones[i]=[xi,yi]stones[i]=[xi​,yi​] represents the ithith stone. Return the maximum possible number of stones that can be removed.
 *
 * Constraints:
 *
 *     1≤ stones.length ≤1000
 *     0≤xi,yi≤50
 */
public class RemoveStones {
    public  int removeStones(int[][] stones) {
        int count = stones.length;
        UnionFind<Pair<Integer,Integer>> unionFind = new UnionFind<>();
        for (int i = 0; i < stones.length; i++) {
            unionFind.add(new Pair<>(stones[i][0], stones[i][1]));
        }
        Arrays.sort(stones, Comparator.comparingInt(r -> r[0]));
        for (int i = 0; i < stones.length-1; i++) {
            Pair<Integer, Integer> v1 = new Pair<>(stones[i][0], stones[i][1]);
            Pair<Integer, Integer> v2 = new Pair<>(stones[i + 1][0], stones[i + 1][1]);
            if(stones[i][0] == stones[i+1][0] && !unionFind.connected(v1, v2)){
                unionFind.connected(v1, v2);
                count--;
            }
        }
        Arrays.sort(stones, Comparator.comparingInt(r -> r[1]));
        for (int i = 0; i < stones.length-1; i++) {
            Pair<Integer, Integer> v1 = new Pair<>(stones[i][0], stones[i][1]);
            Pair<Integer, Integer> v2 = new Pair<>(stones[i + 1][0], stones[i + 1][1]);
            if(stones[i][1] == stones[i+1][1] && !unionFind.connected(v1, v2)){
                unionFind.connected(v1, v2);
                count--;
            }
        }
        return stones.length - count;
    }

    @ParameterizedTest
    @CsvSource(delimiter = '|', value = {
            "(0,0),(0,2),(1,1),(2,0)|2",
            "(0,1),(1,0),(1,1),(2,0)|3",
            "(0,1),(0,3),(1,2),(2,0),(2,3),(3,2)|4",
            "(0,1),(0,0),(1,0)|2",
            "(0,1),(0,0),(1,1)|2",
            "(1,1),(0,0),(3,2)|0",
    })
    void test(String arrStr, int expected){
        var pattern = Pattern.compile("\\(\\d,\\d\\)");
        Matcher matcher = pattern.matcher(arrStr);
        int[][] stones = matcher.results().map(pair -> matcher.group()).
                map(pair -> {
                    var token = pair.replace("(", "").replace(")", "").split(",");
                    return new int[]{Integer.parseInt(token[0]), Integer.parseInt(token[1])};
                }).toArray(int[][]:: new);
        Assertions.assertEquals(expected, removeStones(stones));
    }

    @Test
    void bigTest(){
        var stonesStr = "[[47,9],[49,1],[7,32],[11,24],[9,48],[1,19],[0,4],[35,17],[7,26],[33,50],[33,25],[33,33],[38,41],[9,39],[14,39],[9,12],[47,4],[28,28],[26,41],[31,42],[41,31],[50,24],[21,47],[33,4],[27,15],[6,46],[40,45],[49,36],[48,49],[28,13],[2,43],[20,5],[37,12],[16,17],[18,3],[32,28],[15,13],[4,38],[48,5],[11,4],[2,11],[41,30],[17,17],[44,46],[40,29],[2,24],[11,27],[13,42],[10,29],[49,42],[7,8],[37,34],[13,49],[30,8],[15,0],[38,15],[6,43],[15,29],[19,5],[16,42],[8,37],[26,36],[39,43],[22,36],[3,3],[50,42],[49,45],[21,32],[14,18],[30,7],[15,32],[21,18],[13,41],[24,28],[16,44],[14,20],[50,34],[42,13],[30,19],[46,11],[39,28],[13,20],[22,4],[48,38],[16,45],[2,10],[21,11],[18,7],[16,18],[9,34],[36,43],[15,25],[11,49],[35,23],[46,0],[43,39],[40,19],[10,37],[19,6],[31,10],[18,25],[4,12],[19,13],[41,39],[23,19],[32,32],[10,13],[0,23],[41,24],[19,50],[23,30],[1,23],[23,21],[32,20],[25,47],[33,23],[19,0],[18,36],[19,1],[44,44],[6,20],[11,31],[8,39],[26,39],[30,48],[12,15],[3,50],[7,41],[16,36],[45,29],[31,12],[23,43],[15,2],[48,18],[6,15],[21,34],[35,15],[35,45],[9,45],[32,10],[32,17],[44,19],[9,2],[50,8],[13,4],[23,16],[25,41],[48,15],[40,27],[17,47],[30,6],[39,8],[31,47],[36,37],[4,21],[34,19],[0,46],[42,32],[36,14],[23,29],[22,34],[18,2],[3,43],[0,15],[1,28],[10,38],[35,2],[14,6],[33,0],[2,47],[43,44],[39,16],[15,42],[35,24],[40,34],[28,2],[22,1],[10,15],[29,7],[27,6],[45,34],[29,49],[32,12],[32,45],[12,34],[41,5],[46,23],[32,36],[6,34],[9,44],[49,28],[11,45],[1,4],[35,49],[45,12],[23,4],[15,10],[12,3],[20,36],[32,25],[26,48],[14,33],[40,50],[21,38],[13,43],[22,25],[34,44],[26,18],[9,27],[38,13],[1,3],[42,25],[21,42],[2,34],[27,41],[25,40],[41,44],[45,4],[2,31],[48,45],[49,23],[38,11],[44,37],[16,43],[10,3],[27,0],[37,15],[9,41],[50,9],[29,4],[22,46],[26,20],[47,28],[13,27],[21,13],[29,34],[36,3],[43,26],[25,26],[27,25],[25,30],[47,0],[6,50],[17,48],[11,14],[50,5],[2,49],[28,14],[4,43],[29,12],[38,12],[7,43],[40,5],[0,26],[37,44],[5,32],[49,17],[36,24],[32,44],[10,46],[28,41],[43,0],[38,0],[35,7],[44,45],[50,36],[39,33],[12,27],[3,8],[18,4],[26,19],[32,4],[15,46],[13,45],[44,48],[25,46],[24,40],[49,8],[0,14],[34,39],[30,2],[38,42],[31,9],[48,11],[50,26],[37,41],[47,38],[10,10],[9,8],[3,46],[26,44],[31,16],[43,28],[15,30],[18,33],[39,38],[42,20],[12,25],[30,22],[50,48],[3,13],[37,2],[15,37],[30,43],[23,15],[2,22],[4,36],[9,49],[47,42],[34,25],[36,26],[12,44],[32,1],[48,26],[25,36],[7,11],[30,13],[36,34],[42,21],[4,11],[26,40],[30,24],[17,26],[47,8],[2,14],[15,16],[47,40],[28,35],[22,10],[38,22],[6,48],[21,12],[45,2],[14,3],[44,5],[1,11],[39,40],[22,50],[22,11],[19,33],[31,8],[13,11],[31,0],[23,45],[38,45],[21,1],[25,16],[24,1],[35,42],[9,15],[47,10],[20,25],[43,23],[9,26],[48,25],[26,4],[31,35],[18,21],[32,27],[11,13],[44,2],[11,2],[8,28],[17,34],[7,48],[41,42],[47,16],[11,6],[32,11],[38,30],[33,36],[14,32],[14,24],[3,39],[21,37],[42,35],[41,2],[2,0],[28,47],[46,50],[2,7],[40,30],[0,32],[42,24],[37,36],[8,36],[20,43],[40,47],[3,45],[12,50],[35,19],[46,31],[48,42],[34,34],[36,38],[8,0],[35,30],[50,7],[15,3],[49,3],[46,15],[22,16],[37,13],[20,45],[0,49],[46,40],[34,31],[3,29],[23,23],[6,28],[50,18],[45,26],[43,37],[6,49],[12,36],[50,23],[6,42],[12,18],[25,17],[36,35],[41,43],[50,29],[4,32],[38,26],[46,12],[12,24],[41,49],[37,26],[27,16],[14,46],[15,22],[43,50],[34,40],[31,45],[27,40],[28,1],[11,23],[10,31],[34,6],[30,38],[25,27],[30,12],[7,13],[5,34],[4,7],[5,26],[41,50],[7,40],[35,47],[16,15],[24,10],[41,21],[16,47],[47,41],[42,23],[33,8],[35,13],[44,28],[48,17],[18,39],[11,21],[41,11],[24,24],[50,49],[49,27],[41,17],[36,25],[26,3],[27,42],[29,14],[38,38],[1,30],[8,38],[14,14],[29,33],[19,38],[27,31],[12,46],[18,34],[30,3],[35,27],[15,35],[8,20],[46,13],[37,43],[11,50],[2,4],[24,32],[7,47],[2,16],[37,4],[8,40],[23,27],[0,39],[18,28],[15,21],[30,10],[2,29],[23,40],[5,13],[3,6],[32,15],[47,24],[3,34],[0,8],[21,14],[43,10],[6,18],[45,8],[4,40],[24,5],[45,39],[31,11],[34,45],[29,44],[3,17],[37,37],[25,34],[1,24],[38,16],[37,27],[37,20],[2,20],[26,11],[4,44],[34,15],[11,9],[25,1],[37,35],[15,33],[9,1],[5,47],[37,40],[5,23],[44,42],[30,33],[0,33],[39,31],[32,37],[24,6],[35,4],[9,46],[41,47],[32,18],[0,11],[16,46],[23,6],[45,49],[2,32],[50,38],[47,23],[37,38],[39,49],[40,28],[15,26],[3,2],[26,37],[38,20],[7,25],[49,41],[45,44],[9,21],[4,41],[16,7],[42,18],[5,27],[21,6],[36,29],[2,21],[5,28],[50,28],[47,46],[32,40],[1,22],[4,24],[45,31],[36,44],[43,36],[11,36],[33,45],[27,23],[14,41],[41,22],[47,22],[15,20],[3,23],[19,12],[45,6],[14,49],[40,35],[28,11],[36,15],[30,37],[39,10],[36,31],[4,10],[17,33],[23,35],[40,0],[10,0],[24,8],[46,44],[24,16],[30,9],[28,21],[33,17],[42,10],[5,30],[0,29],[4,26],[50,13],[4,46],[12,28],[3,9],[40,12],[7,49],[30,31],[19,28],[22,23],[44,41],[18,24],[1,18],[2,44],[3,21],[7,39],[49,13],[32,21],[47,2],[12,45],[41,26],[26,0],[36,41],[17,20],[19,39],[22,28],[9,25],[4,48],[31,25],[4,45],[44,7],[38,1],[38,27],[8,33],[31,50],[49,25],[1,42],[25,44],[39,30],[23,39],[47,34],[26,8],[39,34],[28,40],[31,34],[24,9],[33,31],[12,37],[35,28],[19,35],[34,13],[29,24],[17,49],[26,28],[9,3],[37,8],[26,1],[32,9],[20,44],[25,29],[8,41],[4,33],[33,19],[6,10],[31,39],[26,34],[3,44],[27,43],[35,21],[24,27],[2,17],[0,37],[46,19],[10,34],[44,14],[18,26],[43,4],[7,33],[1,27],[38,17],[1,25],[6,32],[37,50],[6,25],[24,49],[6,30],[31,43],[15,38],[30,49],[41,38],[11,44],[25,45],[22,31],[21,41],[17,41],[10,32],[24,44],[40,25],[32,3],[10,19],[48,1],[25,25],[13,0],[13,6],[17,32],[50,46],[50,10],[34,5],[15,9],[36,11],[1,9],[38,28],[21,4],[41,8],[25,7],[37,23],[24,34],[26,5],[15,24],[39,22],[7,9],[12,20],[26,32],[50,21],[45,45],[20,31],[18,23],[25,19],[38,43],[40,32],[18,45],[33,2],[5,44],[8,47],[5,5],[44,49],[48,30],[45,46],[44,21],[38,35],[25,9],[23,28],[14,28],[8,9],[23,7],[16,48],[7,1],[50,20],[42,49],[34,9],[0,19],[47,44],[29,17],[40,7],[18,17],[42,42],[24,23],[42,11],[22,40],[12,13],[1,31],[16,38],[9,31],[30,11],[46,3],[1,49],[38,40],[5,17],[16,41],[5,24],[49,10],[21,7],[38,10],[25,13],[13,21],[36,23],[17,31],[3,48],[12,22],[24,47],[39,20],[17,27],[27,44],[46,9],[30,1],[16,0],[3,35],[9,11],[36,39],[5,10],[6,21],[0,35],[49,29],[48,2],[1,40],[24,19],[44,12],[33,48],[30,23],[45,18],[5,35],[37,10],[7,23],[40,4],[19,18],[34,27],[13,29],[49,26],[41,16],[34,8],[8,26],[15,31],[16,13],[10,27],[33,14],[46,21],[9,19],[9,32],[28,23],[43,20],[26,15],[7,24],[4,22],[0,28],[35,39],[28,10],[31,49],[3,42],[21,48],[45,11],[40,17],[40,20],[0,48],[15,28],[12,19],[15,44],[10,11],[30,27],[20,6],[50,14],[40,21],[49,34],[13,50],[20,2],[39,26],[24,11],[27,1],[1,38],[16,35],[39,25],[2,35],[49,4],[5,0],[27,10],[29,50],[45,37],[26,23],[41,36],[39,47],[28,25],[29,2],[49,9],[45,5],[29,42],[34,38],[40,1],[20,16],[26,49],[41,19],[10,7],[29,0],[17,10],[2,33],[33,43],[30,39],[50,43],[8,18],[37,17],[46,46],[31,46],[21,30],[32,49],[0,41],[2,39],[20,27],[34,26],[27,34],[26,27],[44,3],[18,0],[42,7],[35,37],[50,37],[45,41],[14,27],[47,1],[27,7],[38,48],[45,27],[32,6],[20,37],[31,2],[9,43],[0,2],[2,26],[44,16],[12,26],[8,2],[8,1],[20,49],[29,35],[5,18],[3,30],[29,36],[46,18],[43,43],[47,35],[46,27],[31,14],[33,32],[24,46],[37,39],[13,25],[3,1],[30,26],[47,6],[9,29],[47,17],[30,14],[44,13],[6,29],[4,2],[22,27],[17,18],[10,43],[11,39],[12,12],[50,47],[36,18],[12,4],[2,9],[8,45],[30,25],[41,37],[1,15],[28,26],[25,14],[30,46],[35,29],[43,2],[34,37],[2,3],[1,2],[49,16],[25,33],[15,7],[42,31],[5,40],[14,35],[10,4],[20,7],[6,39],[20,33],[18,20],[40,31],[28,6],[18,47],[36,36],[44,33],[4,35],[45,3],[8,3],[40,10],[11,1],[15,17],[11,20],[23,22],[10,45],[30,29],[50,0],[28,9],[37,49],[18,1],[34,33],[43,13],[28,18],[12,11],[16,39],[8,24],[8,43],[45,16]]";
        var pattern = Pattern.compile("\\[\\d,\\d\\]");
        Matcher matcher = pattern.matcher(stonesStr);
        int[][] stones = matcher.results().map(pair -> matcher.group()).
                map(pair -> {
                    var token = pair.replace("[", "").replace("]", "").split(",");
                    return new int[]{Integer.parseInt(token[0]), Integer.parseInt(token[1])};
                }).toArray(int[][]:: new);
        System.out.println(removeStones(stones));
    }
}
